        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:48
        -:    0:Programs:13
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 1440 returned 100% blocks executed 83%
     1440:    8:int compare(const void* a, const void* b) {
     1440:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 1440
    #####:   10:    return 1;
     1440:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 384 (fallthrough)
branch  1 taken 1056
      384:   12:    return -1;
     1056:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 48 returned 100% blocks executed 83%
       48:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
       48:   44:  SelectStream(1);
call    0 returned 48
       48:   45:  PutSeed((long)randomSeed);
call    0 returned 48
        -:   46:
        -:   47:  //check number of players
       48:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 48 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 48
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       48:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      528:   57:  for (i = 0; i < 10; i++)
branch  0 taken 480
branch  1 taken 48 (fallthrough)
        -:   58:    {
     5280:   59:      for (j = 0; j < 10; j++)
branch  0 taken 4800
branch  1 taken 480 (fallthrough)
        -:   60:        {
     4800:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 4320 (fallthrough)
branch  1 taken 480
branch  2 taken 0 (fallthrough)
branch  3 taken 4320
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       48:   73:  if (numPlayers == 2)
branch  0 taken 48 (fallthrough)
branch  1 taken 0
        -:   74:    {
       48:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       48:   87:  if (numPlayers == 2)
branch  0 taken 48 (fallthrough)
branch  1 taken 0
        -:   88:    {
       48:   89:      state->supplyCount[estate] = 8;
       48:   90:      state->supplyCount[duchy] = 8;
       48:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       48:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       48:  102:  state->supplyCount[silver] = 40;
       48:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     1008:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 960
branch  1 taken 48 (fallthrough)
        -:  107:    {
     7920:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 7440
branch  1 taken 480 (fallthrough)
        -:  109:	{
     7440:  110:	  if (kingdomCards[j] == i)
branch  0 taken 480 (fallthrough)
branch  1 taken 6960
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      480:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 480 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 480
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){
branch  0 never executed
branch  1 never executed
    #####:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      480:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      480:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     6960:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      144:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 96
branch  1 taken 48 (fallthrough)
        -:  139:    {
       96:  140:      state->deckCount[i] = 0;
      384:  141:      for (j = 0; j < 3; j++)
branch  0 taken 288
branch  1 taken 96 (fallthrough)
        -:  142:	{
      288:  143:	  state->deck[i][j] = estate;
      288:  144:	  state->deckCount[i]++;
        -:  145:	}
      768:  146:      for (j = 3; j < 10; j++)
branch  0 taken 672
branch  1 taken 96 (fallthrough)
        -:  147:	{
      672:  148:	  state->deck[i][j] = copper;
      672:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      144:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 96
branch  1 taken 48 (fallthrough)
        -:  155:    {
       96:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 96
branch  1 taken 0 (fallthrough)
branch  2 taken 96
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      144:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 96
branch  1 taken 48 (fallthrough)
        -:  164:    {
        -:  165:      //initialize hand size to zero
       96:  166:      state->handCount[i] = 0;
       96:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
     1344:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 1296
branch  1 taken 48 (fallthrough)
        -:  177:    {
     1296:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       48:  182:  state->outpostPlayed = 0;
       48:  183:  state->phase = 0;
       48:  184:  state->numActions = 1;
       48:  185:  state->numBuys = 1;
       48:  186:  state->playedCardCount = 0;
       48:  187:  state->whoseTurn = 0;
       48:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      288:  192:  for (it = 0; it < 5; it++){
branch  0 taken 240
branch  1 taken 48 (fallthrough)
      240:  193:    drawCard(state->whoseTurn, state);
call    0 returned 240
        -:  194:  }
        -:  195:
       48:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 48
        -:  197:
       48:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 12884901960 returned 100% blocks executed 100%
12884901960:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
12884901960:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
12884901960:  209:  if (state->deckCount[player] < 1)
branch  0 taken 12884901864 (fallthrough)
branch  1 taken 96
12884901864:  210:    return -1;
       96:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 96
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     1152:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 960
branch  1 taken 96 (fallthrough)
      960:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 960
      960:  216:    newDeck[newDeckPos] = state->deck[player][card];
      960:  217:    newDeckPos++;
     3360:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 2400
branch  1 taken 960 (fallthrough)
     2400:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      960:  221:    state->deckCount[player]--;
        -:  222:  }
     1056:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 960
branch  1 taken 96 (fallthrough)
      960:  224:    state->deck[player][i] = newDeck[i];
      960:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       96:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 24 returned 100% blocks executed 100%
       24:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       24:  280:  who = state->whoseTurn;
        -:  281:
       24:  282:  if (state->numBuys < 1){
branch  0 taken 6 (fallthrough)
branch  1 taken 18
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        6:  285:    return -1;
       18:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 18
branch  1 taken 6 (fallthrough)
branch  2 taken 12
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        6:  289:    return -1;
       12:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 12
branch  1 taken 6 (fallthrough)
branch  2 taken 6
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        6:  293:    return -1;
        -:  294:  } else {
        6:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        6:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 6
        -:  298:
        6:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 6
        6:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
        6:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 30 returned 100% blocks executed 100%
       30:  320:int supplyCount(int card, struct gameState *state) {
       30:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 78 returned 100% blocks executed 100%
       78:  346:int whoseTurn(struct gameState *state) {
       78:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 12 returned 100% blocks executed 100%
       12:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       12:  353:  int currentPlayer = whoseTurn(state);
call    0 returned 12
        -:  354:
        -:  355:  //Discard hand
       72:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 60
branch  1 taken 12 (fallthrough)
       60:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       60:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
       12:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
       12:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 taken 6 (fallthrough)
branch  1 taken 6
        6:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
        6:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       12:  370:  state->outpostPlayed = 0;
       12:  371:  state->phase = 0;
       12:  372:  state->numActions = 1;
       12:  373:  state->coins = 0;
       12:  374:  state->numBuys = 1;
       12:  375:  state->playedCardCount = 0;
       12:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
       72:  380:  for (k = 0; k < 5; k++){
branch  0 taken 60
branch  1 taken 12 (fallthrough)
       60:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 60
        -:  382:  }
        -:  383:
        -:  384:  //Update money
       12:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 12
        -:  386:
       12:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 32 returned 100% blocks executed 100%
       32:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
       32:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 9 (fallthrough)
branch  1 taken 23
        -:  396:    {
        9:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
       23:  401:  j = 0;
      598:  402:  for (i = 0; i < 25; i++)
branch  0 taken 575
branch  1 taken 23 (fallthrough)
        -:  403:    {
      575:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 9 (fallthrough)
branch  1 taken 566
        -:  405:	{
        9:  406:	  j++;
        -:  407:	}
        -:  408:    }
       23:  409:  if ( j >= 3)
branch  0 taken 3 (fallthrough)
branch  1 taken 20
        -:  410:    {
        3:  411:      return 1;
        -:  412:    }
        -:  413:
       20:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 12884902242 returned 100% blocks executed 85%
12884902242:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
12884902242:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 12884901864 (fallthrough)
branch  1 taken 378
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
12884901864:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0
branch  1 taken 12884901864 (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
12884901864:  538:    state->deckCount[player] = state->discardCount[player];
12884901864:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
12884901864:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 12884901864
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
12884901864:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
12884901864:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
12884901864:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
12884901864:  559:    if (deckCounter == 0)
branch  0 taken 12884901864 (fallthrough)
branch  1 taken 0
12884901864:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      378:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      378:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      378:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      378:  576:    state->deckCount[player]--;
      378:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      378:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 18 returned 100% blocks executed 10%
       18:  583:int getCost(int cardNumber)
        -:  584:{
       18:  585:  switch( cardNumber )
branch  0 taken 0
branch  1 taken 0
branch  2 taken 0
branch  3 taken 18
branch  4 taken 0
branch  5 taken 0
branch  6 taken 0
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
branch 21 taken 0
branch 22 taken 0
branch 23 taken 0
branch 24 taken 0
branch 25 taken 0
branch 26 taken 0
branch 27 taken 0
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
       18:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 24 returned 100% blocks executed 6%
       24:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
       24:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 24
       24:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
       24:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
       24:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
       24:  660:  int z = 0;// this is the counter for the temp hand
       24:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:
        -:  665:
        -:  666:  //uses switch to select card and perform actions
       24:  667:  switch( card )
branch  0 taken 6
branch  1 taken 6
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 6
branch  7 taken 6
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  668:    {
        -:  669:    case adventurer:
        -:  670:    //refactored adventurer card
        6:  671:      adventurerCard(handPos, state);
call    0 returned 6
        6:  672:      return 0;
        -:  673:    //refactored council room card
        -:  674:    case council_room:
        6:  675:      councilCard(handPos, state);
call    0 returned 6
        6:  676:      return 0;
        -:  677:
        -:  678:    case feast:
        -:  679:      //gain card with cost up to 5
        -:  680:      //Backup hand
    #####:  681:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  682:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  683:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  684:      }
        -:  685:      //Backup hand
        -:  686:
        -:  687:      //Update Coins for Buy
    #####:  688:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  689:      x = 1;//Condition to loop on
    #####:  690:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  691:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  692:	  if (DEBUG)
        -:  693:	    printf("None of that card left, sorry!\n");
        -:  694:
        -:  695:	  if (DEBUG){
        -:  696:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  697:	  }
        -:  698:	}
    #####:  699:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  700:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  701:
        -:  702:	  if (DEBUG){
        -:  703:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  704:	  }
        -:  705:	}
        -:  706:	else{
        -:  707:
        -:  708:	  if (DEBUG){
        -:  709:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  710:	  }
        -:  711:
    #####:  712:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  713:	  x = 0;//No more buying cards
        -:  714:
        -:  715:	  if (DEBUG){
        -:  716:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  717:	  }
        -:  718:
        -:  719:	}
        -:  720:      }
        -:  721:
        -:  722:      //Reset Hand
    #####:  723:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  724:	state->hand[currentPlayer][i] = temphand[i];
    #####:  725:	temphand[i] = -1;
        -:  726:      }
        -:  727:      //Reset Hand
        -:  728:
    #####:  729:      return 0;
        -:  730:
        -:  731:    case gardens:
    #####:  732:      return -1;
        -:  733:
        -:  734:    case mine:
    #####:  735:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  736:
    #####:  737:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  738:	{
    #####:  739:	  return -1;
        -:  740:	}
        -:  741:
    #####:  742:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  743:	{
    #####:  744:	  return -1;
        -:  745:	}
        -:  746:
    #####:  747:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  748:	{
    #####:  749:	  return -1;
        -:  750:	}
        -:  751:
    #####:  752:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  753:
        -:  754:      //discard card from hand
    #####:  755:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  756:
        -:  757:      //discard trashed card
    #####:  758:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  759:	{
    #####:  760:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  761:	    {
    #####:  762:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  763:	      break;
        -:  764:	    }
        -:  765:	}
        -:  766:
    #####:  767:      return 0;
        -:  768:
        -:  769:    case remodel:
    #####:  770:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  771:
    #####:  772:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  773:	{
    #####:  774:	  return -1;
        -:  775:	}
        -:  776:
    #####:  777:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  778:
        -:  779:      //discard card from hand
    #####:  780:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  781:
        -:  782:      //discard trashed card
    #####:  783:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  784:	{
    #####:  785:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  786:	    {
    #####:  787:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  788:	      break;
        -:  789:	    }
        -:  790:	}
        -:  791:
        -:  792:
    #####:  793:      return 0;
        -:  794:
        -:  795:    case smithy:
        -:  796://refactored smithy
        6:  797:      smithyCard(handPos, state);
call    0 returned 6
        6:  798:      return 0;
        -:  799://refactored village
        -:  800:    case village:
        6:  801:      villageCard(handPos, state);
call    0 returned 6
        6:  802:      return 0;
        -:  803:
        -:  804:    case baron:
    #####:  805:      state->numBuys++;//Increase buys by 1!
    #####:  806:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  807:	int p = 0;//Iterator for hand!
    #####:  808:	int card_not_discarded = 1;//Flag for discard set!
    #####:  809:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  810:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  811:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  812:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  813:	    state->discardCount[currentPlayer]++;
    #####:  814:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  815:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  816:	    }
    #####:  817:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  818:	    state->handCount[currentPlayer]--;
    #####:  819:	    card_not_discarded = 0;//Exit the loop
        -:  820:	  }
    #####:  821:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  822:	    if(DEBUG) {
        -:  823:	      printf("No estate cards in your hand, invalid choice\n");
        -:  824:	      printf("Must gain an estate if there are any\n");
        -:  825:	    }
    #####:  826:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  827:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  828:	      state->supplyCount[estate]--;//Decrement estates
    #####:  829:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  830:		isGameOver(state);
call    0 never executed
        -:  831:	      }
        -:  832:	    }
    #####:  833:	    card_not_discarded = 0;//Exit the loop
        -:  834:	  }
        -:  835:
        -:  836:	  else{
    #####:  837:	    p++;//Next card
        -:  838:	  }
        -:  839:	}
        -:  840:      }
        -:  841:
        -:  842:      else{
    #####:  843:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  844:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  845:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  846:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  847:	    isGameOver(state);
call    0 never executed
        -:  848:	  }
        -:  849:	}
        -:  850:      }
        -:  851:
        -:  852:
    #####:  853:      return 0;
        -:  854:
        -:  855:    case great_hall:
        -:  856:      //+1 Card
    #####:  857:      drawCard(currentPlayer, state);
call    0 never executed
        -:  858:
        -:  859:      //+1 Actions
    #####:  860:      state->numActions++;
        -:  861:
        -:  862:      //discard card from hand
    #####:  863:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  864:      return 0;
        -:  865:
        -:  866:    case minion:
    #####:  867:      minionCard(handPos, state, choice1, choice2);
call    0 never executed
    #####:  868:      return 0;
        -:  869:
        -:  870:    case steward:
    #####:  871:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  872:	{
        -:  873:	  //+2 cards
    #####:  874:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  875:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  876:	}
    #####:  877:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  878:	{
        -:  879:	  //+2 coins
    #####:  880:	  state->coins = state->coins + 2;
        -:  881:	}
        -:  882:      else
        -:  883:	{
        -:  884:	  //trash 2 cards in hand
    #####:  885:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  886:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  887:	}
        -:  888:
        -:  889:      //discard card from hand
    #####:  890:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  891:      return 0;
        -:  892:
        -:  893:    case tribute:
    #####:  894:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  895:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  896:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  897:	  state->deckCount[nextPlayer]--;
        -:  898:	}
    #####:  899:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  900:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  901:	  state->discardCount[nextPlayer]--;
        -:  902:	}
        -:  903:	else{
        -:  904:	  //No Card to Reveal
        -:  905:	  if (DEBUG){
        -:  906:	    printf("No cards to reveal\n");
        -:  907:	  }
        -:  908:	}
        -:  909:      }
        -:  910:
        -:  911:      else{
    #####:  912:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  913:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  914:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  915:	    state->deckCount[nextPlayer]++;
    #####:  916:	    state->discard[nextPlayer][i] = -1;
    #####:  917:	    state->discardCount[nextPlayer]--;
        -:  918:	  }
        -:  919:
    #####:  920:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  921:	}
    #####:  922:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  923:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  924:	state->deckCount[nextPlayer]--;
    #####:  925:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  926:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  927:	state->deckCount[nextPlayer]--;
        -:  928:      }
        -:  929:
    #####:  930:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####:  931:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  932:	state->playedCardCount++;
    #####:  933:	tributeRevealedCards[1] = -1;
        -:  934:      }
        -:  935:
    #####:  936:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  937:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  938:	  state->coins += 2;
        -:  939:	}
        -:  940:
    #####:  941:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  942:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  943:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  944:	}
        -:  945:	else{//Action Card
    #####:  946:	  state->numActions = state->numActions + 2;
        -:  947:	}
        -:  948:      }
        -:  949:
    #####:  950:      return 0;
        -:  951:
        -:  952:    case ambassador:
    #####:  953:      j = 0;		//used to check if player has enough cards to discard
        -:  954:
    #####:  955:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  956:	{
    #####:  957:	  return -1;
        -:  958:	}
        -:  959:
    #####:  960:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  961:	{
    #####:  962:	  return -1;
        -:  963:	}
        -:  964:
    #####:  965:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  966:	{
    #####:  967:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  968:	    {
    #####:  969:	      j++;
        -:  970:	    }
        -:  971:	}
    #####:  972:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  973:	{
    #####:  974:	  return -1;
        -:  975:	}
        -:  976:
        -:  977:      if (DEBUG)
        -:  978:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  979:
        -:  980:      //increase supply count for choosen card by amount being discarded
    #####:  981:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  982:
        -:  983:      //each other player gains a copy of revealed card
    #####:  984:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  985:	{
    #####:  986:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  987:	    {
    #####:  988:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  989:	    }
        -:  990:	}
        -:  991:
        -:  992:      //discard played card from hand
    #####:  993:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  994:
        -:  995:      //trash copies of cards returned to supply
    #####:  996:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  997:	{
    #####:  998:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  999:	    {
    #####: 1000:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1001:		{
    #####: 1002:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1003:		  break;
        -: 1004:		}
        -: 1005:	    }
        -: 1006:	}
        -: 1007:
    #####: 1008:      return 0;
        -: 1009:
        -: 1010:    case cutpurse:
        -: 1011:
    #####: 1012:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1013:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1014:	{
    #####: 1015:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1016:	    {
    #####: 1017:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1018:		{
    #####: 1019:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1020:		    {
    #####: 1021:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1022:		      break;
        -: 1023:		    }
    #####: 1024:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1025:		    {
    #####: 1026:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1027:			{
        -: 1028:			  if (DEBUG)
        -: 1029:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1030:			}
    #####: 1031:		      break;
        -: 1032:		    }
        -: 1033:		}
        -: 1034:
        -: 1035:	    }
        -: 1036:
        -: 1037:	}
        -: 1038:
        -: 1039:      //discard played card from hand
    #####: 1040:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1041:
    #####: 1042:      return 0;
        -: 1043:
        -: 1044:
        -: 1045:    case embargo:
        -: 1046:      //+2 Coins
    #####: 1047:      state->coins = state->coins + 2;
        -: 1048:
        -: 1049:      //see if selected pile is in play
    #####: 1050:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1051:	{
    #####: 1052:	  return -1;
        -: 1053:	}
        -: 1054:
        -: 1055:      //add embargo token to selected supply pile
    #####: 1056:      state->embargoTokens[choice1]++;
        -: 1057:
        -: 1058:      //trash card
    #####: 1059:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1060:      return 0;
        -: 1061:
        -: 1062:    case outpost:
        -: 1063:      //set outpost flag
    #####: 1064:      state->outpostPlayed++;
        -: 1065:
        -: 1066:      //discard card
    #####: 1067:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1068:      return 0;
        -: 1069:
        -: 1070:    case salvager:
        -: 1071:      //+1 buy
    #####: 1072:      state->numBuys++;
        -: 1073:
    #####: 1074:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1075:	{
        -: 1076:	  //gain coins equal to trashed card
    #####: 1077:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1078:	  //trash card
    #####: 1079:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1080:	}
        -: 1081:
        -: 1082:      //discard card
    #####: 1083:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1084:      return 0;
        -: 1085:
        -: 1086:    case sea_hag:
    #####: 1087:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1088:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1089:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1090:	  state->discardCount[i]++;
    #####: 1091:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1092:	}
        -: 1093:      }
    #####: 1094:      return 0;
        -: 1095:
        -: 1096:    case treasure_map:
        -: 1097:      //search hand for another treasure_map
    #####: 1098:      index = -1;
    #####: 1099:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1100:	{
    #####: 1101:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1102:	    {
    #####: 1103:	      index = i;
    #####: 1104:	      break;
        -: 1105:	    }
        -: 1106:	}
    #####: 1107:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1108:	{
        -: 1109:	  //trash both treasure cards
    #####: 1110:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1111:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1112:
        -: 1113:	  //gain 4 Gold cards
    #####: 1114:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1115:	    {
    #####: 1116:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1117:	    }
        -: 1118:
        -: 1119:	  //return success
    #####: 1120:	  return 1;
        -: 1121:	}
        -: 1122:
        -: 1123:      //no second treasure_map found in hand
    #####: 1124:      return -1;
        -: 1125:    }
        -: 1126:
    #####: 1127:  return -1;
        -: 1128:}
        -: 1129:
function discardCard called 18 returned 100% blocks executed 78%
       18: 1130:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1131:{
        -: 1132:
        -: 1133:  //if card is not trashed, added to Played pile
       18: 1134:  if (trashFlag < 1)
branch  0 taken 12 (fallthrough)
branch  1 taken 6
        -: 1135:    {
        -: 1136:      //add card to played pile
       12: 1137:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       12: 1138:      state->playedCardCount++;
        -: 1139:    }
        -: 1140:
        -: 1141:  //set played card to -1
       18: 1142:  state->hand[currentPlayer][handPos] = -1;
        -: 1143:
        -: 1144:  //remove card from player's hand
       18: 1145:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0 (fallthrough)
branch  1 taken 18
        -: 1146:    {
        -: 1147:      //reduce number of cards in hand
    #####: 1148:      state->handCount[currentPlayer]--;
        -: 1149:    }
       18: 1150:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 18
        -: 1151:    {
        -: 1152:      //reduce number of cards in hand
    #####: 1153:      state->handCount[currentPlayer]--;
        -: 1154:    }
        -: 1155:  else
        -: 1156:    {
        -: 1157:      //replace discarded card with last card in hand
       18: 1158:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1159:      //set last card to -1
       18: 1160:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1161:      //reduce number of cards in hand
       18: 1162:      state->handCount[currentPlayer]--;
        -: 1163:    }
        -: 1164:
       18: 1165:  return 0;
        -: 1166:}
        -: 1167:
function gainCard called 6 returned 100% blocks executed 70%
        6: 1168:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1169:{
        -: 1170:  //Note: supplyPos is enum of choosen card
        -: 1171:
        -: 1172:  //check if supply pile is empty (0) or card is not used in game (-1)
        6: 1173:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 6
branch  1 taken 0 (fallthrough)
branch  2 taken 6
        -: 1174:    {
    #####: 1175:      return -1;
        -: 1176:    }
        -: 1177:
        -: 1178:  //added card for [whoseTurn] current player:
        -: 1179:  // toFlag = 0 : add to discard
        -: 1180:  // toFlag = 1 : add to deck
        -: 1181:  // toFlag = 2 : add to hand
        -: 1182:
        6: 1183:  if (toFlag == 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 6
        -: 1184:    {
    #####: 1185:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1186:      state->deckCount[player]++;
        -: 1187:    }
        6: 1188:  else if (toFlag == 2)
branch  0 taken 0 (fallthrough)
branch  1 taken 6
        -: 1189:    {
    #####: 1190:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1191:      state->handCount[player]++;
        -: 1192:    }
        -: 1193:  else
        -: 1194:    {
        6: 1195:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        6: 1196:      state->discardCount[player]++;
        -: 1197:    }
        -: 1198:
        -: 1199:  //decrease number in supply pile
        6: 1200:  state->supplyCount[supplyPos]--;
        -: 1201:
        6: 1202:  return 0;
        -: 1203:}
        -: 1204:
function updateCoins called 90 returned 100% blocks executed 100%
       90: 1205:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1206:{
        -: 1207:  int i;
        -: 1208:
        -: 1209:  //reset coin count
       90: 1210:  state->coins = 0;
        -: 1211:
        -: 1212:  //add coins for each Treasure card in player's hand
      540: 1213:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 450
branch  1 taken 90 (fallthrough)
        -: 1214:    {
      450: 1215:      if (state->hand[player][i] == copper)
branch  0 taken 282 (fallthrough)
branch  1 taken 168
        -: 1216:	{
      282: 1217:	  state->coins += 1;
        -: 1218:	}
      168: 1219:      else if (state->hand[player][i] == silver)
branch  0 taken 54 (fallthrough)
branch  1 taken 114
        -: 1220:	{
       54: 1221:	  state->coins += 2;
        -: 1222:	}
      114: 1223:      else if (state->hand[player][i] == gold)
branch  0 taken 42 (fallthrough)
branch  1 taken 72
        -: 1224:	{
       42: 1225:	  state->coins += 3;
        -: 1226:	}
        -: 1227:    }
        -: 1228:
        -: 1229:  //add bonus
       90: 1230:  state->coins += bonus;
        -: 1231:
       90: 1232:  return 0;
        -: 1233:}
        -: 1234://REFRACTORED CARDS
        -: 1235:// #1 required - smithy
        -: 1236:
        -: 1237://bug change i++ in the for loop to i--, makes it so you draw a crap ton of cards
function smithyCard called 6 returned 100% blocks executed 100%
        6: 1238:void smithyCard(int handPos, struct gameState *state){
        6: 1239:    int currentPlayer = whoseTurn(state);//get current player
call    0 returned 6
        -: 1240:    int i;
        -: 1241:    //draw 3 cards
12884901900: 1242:    for (i = 0; i < 3; i--){
branch  0 taken 12884901894
branch  1 taken 6 (fallthrough)
12884901894: 1243:      drawCard(currentPlayer, state);
call    0 returned 12884901894
        -: 1244:    }
        -: 1245:    //discard card from hand
        6: 1246:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 6
        -: 1247:
        6: 1248:}
        -: 1249://#2 required - adventurer
        -: 1250://bug set z = 1 instead of 0, it screws up the counter
        -: 1251://bug changed drawntreasure<2 to 1, make it so you can't draw more treasure
function adventurerCard called 6 returned 100% blocks executed 73%
        6: 1252:void adventurerCard(int handPos, struct gameState *state){
        6: 1253:  int currentPlayer = whoseTurn(state);
call    0 returned 6
        6: 1254:  int nextPlayer = currentPlayer + 1;
        -: 1255:  int temphand[MAX_HAND];
        6: 1256:  int drawntreasure = 0;
        -: 1257:  int cardDrawn;
        6: 1258:  int z = 1; //counter for temp hand
        -: 1259:
       18: 1260:  while(drawntreasure<1){
branch  0 taken 6
branch  1 taken 6 (fallthrough)
        6: 1261:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0 (fallthrough)
branch  1 taken 6
    #####: 1262:      shuffle(currentPlayer, state);
call    0 never executed
        -: 1263:    }
        6: 1264:    drawCard(currentPlayer, state);
call    0 returned 6
        -: 1265:
        6: 1266:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        6: 1267:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 0 (fallthrough)
branch  1 taken 6
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        6: 1268:      drawntreasure++;
        -: 1269:      else{
    #####: 1270:        temphand[z]=cardDrawn;
    #####: 1271:        state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1272:        z++;
        -: 1273:      }
        -: 1274:  }
        -: 1275:
       18: 1276:  while(z-1>=0){
branch  0 taken 6
branch  1 taken 6 (fallthrough)
        6: 1277:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        6: 1278:    z=z-1;
        -: 1279:  }
        6: 1280:}
        -: 1281:
        -: 1282:// #3 - council_room
        -: 1283://bug changed first for loop to i <= 4, draws one extra card
function councilCard called 6 returned 100% blocks executed 100%
        6: 1284:void councilCard(int handPos, struct gameState *state){
        -: 1285:  int i;
        6: 1286:  int currentPlayer = whoseTurn(state);
call    0 returned 6
        -: 1287:
        -: 1288:  //+4 cards
       36: 1289:  for ( i = 0; i <= 4; i ++){
branch  0 taken 30
branch  1 taken 6 (fallthrough)
       30: 1290:    drawCard(currentPlayer, state);
call    0 returned 30
        -: 1291:  }
        -: 1292:  //+1 buy
        6: 1293:  state->numBuys++;
        -: 1294://each other player draws a card
       18: 1295:  for (i = 0; i < state->numPlayers; i++){
branch  0 taken 12
branch  1 taken 6 (fallthrough)
       12: 1296:    if (i != currentPlayer){
branch  0 taken 6 (fallthrough)
branch  1 taken 6
        6: 1297:      drawCard(i, state);
call    0 returned 6
        -: 1298:    }
        -: 1299:  }
        6: 1300:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 6
        -: 1301:
        6: 1302:}
        -: 1303:
        -: 1304:// #4 - village
        -: 1305://bug changed the discardCard parameter to 1 instead of 0, throws it away from players deck
function villageCard called 6 returned 100% blocks executed 100%
        6: 1306:void villageCard(int handPos, struct gameState *state){
        6: 1307:  int currentPlayer = whoseTurn(state);
call    0 returned 6
        -: 1308:
        -: 1309:  //+1 card
        6: 1310:  drawCard(currentPlayer, state);
call    0 returned 6
        -: 1311:
        -: 1312:  //+2 actions
        6: 1313:  state->numActions = state->numActions + 2;
        -: 1314:
        -: 1315:  //discard played card from handPos
        6: 1316:  discardCard(handPos, currentPlayer, state, 1);
call    0 returned 6
        -: 1317:
        -: 1318:
        6: 1319:}
        -: 1320:
        -: 1321://#5 - minion
function minionCard called 0 returned 0% blocks executed 0%
    #####: 1322:void minionCard(int handPos, struct gameState *state, int choice1, int choice2){
    #####: 1323:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1324:  int i;
        -: 1325:  int j;
        -: 1326:
        -: 1327:  //+1 actions
    #####: 1328:  state->numActions++;
        -: 1329:
        -: 1330:  //discard card from hand
    #####: 1331:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1332:  //+2 coins
    #####: 1333:  if (choice1){
branch  0 never executed
branch  1 never executed
    #####: 1334:    state->coins = state->coins + 2;
        -: 1335:  }
    #####: 1336:  else if (choice2){ // discoard hand, redraw 4, other player with 5+ cards hand and draw four
branch  0 never executed
branch  1 never executed
    #####: 1337:    while(numHandCards(state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1338:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1339:    }
        -: 1340:    //draw 4
    #####: 1341:    for(i = 0; i < 4; i++){
branch  0 never executed
branch  1 never executed
    #####: 1342:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1343:    }
        -: 1344:    //other players discard hand and redraw if handsize >4
    #####: 1345:    for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1346:      if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1347:        if (state->handCount[i] > 4){
branch  0 never executed
branch  1 never executed
    #####: 1348:          while( state->handCount[i] > 0 ){
branch  0 never executed
branch  1 never executed
    #####: 1349:            discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1350:          }
    #####: 1351:          for (j = 0; j < 4; j++){
branch  0 never executed
branch  1 never executed
    #####: 1352:            drawCard(i, state);
call    0 never executed
        -: 1353:          }
        -: 1354:        }
        -: 1355:      }
        -: 1356:    }
        -: 1357:  }
    #####: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
