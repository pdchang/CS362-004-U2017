----------------- Testing Card: smithy ----------------
RANDOM TESTS.
TEST # 0: 
+3 Cards and discard smithy
hand count = 0, expected = 456
TEST: +2 Net Gain of Cards Failed
Check it came from player's Deck 
deck count = 10, expected = 368
TEST: Player drew from own deck Failed
Check to make sure smithy was discarded after being played
played count = 1, expected = 2
TEST: Smithy was the used card Failed
Check to make sure its still the player's turn
expected player = 0, current player = 0
Check to see after playing the card there are no more actions
TEST: No actions left after playing card Failed
TEST # 1: 
+3 Cards and discard smithy
hand count = 9, expected = 209
TEST: +2 Net Gain of Cards Failed
Check it came from player's Deck 
deck count = 0, expected = 114
TEST: Player drew from own deck Failed
Check to make sure smithy was discarded after being played
played count = 1, expected = 2
TEST: Smithy was the used card Failed
Check to make sure its still the player's turn
expected player = 0, current player = 0
Check to see after playing the card there are no more actions
TEST: No actions left after playing card Failed

 >>>>> Only 4 / 3000 tests have passed

File 'dominion.c'
Lines executed:22.77% of 571
Branches executed:18.71% of 417
Taken at least once:16.07% of 417
Calls executed:14.00% of 100
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:13
        -:    0:Programs:11
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 184965 returned 100% blocks executed 83%
   184965:    8:int compare(const void* a, const void* b) {
   184965:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 184965
    #####:   10:    return 1;
   184965:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 49324 (fallthrough)
branch  1 taken 135641
    49324:   12:    return -1;
   135641:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 5514 returned 100% blocks executed 91%
     5514:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
     5514:   44:  SelectStream(1);
call    0 returned 5514
     5514:   45:  PutSeed((long)randomSeed);
call    0 returned 5514
        -:   46:
        -:   47:  //check number of players
     5514:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 4101 (fallthrough)
branch  1 taken 1413
branch  2 taken 0 (fallthrough)
branch  3 taken 4101
        -:   49:    {
     1413:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     4101:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    45111:   57:  for (i = 0; i < 10; i++)
branch  0 taken 41010
branch  1 taken 4101 (fallthrough)
        -:   58:    {
   451110:   59:      for (j = 0; j < 10; j++)
branch  0 taken 410100
branch  1 taken 41010 (fallthrough)
        -:   60:        {
   410100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 369090 (fallthrough)
branch  1 taken 41010
branch  2 taken 0 (fallthrough)
branch  3 taken 369090
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     4101:   73:  if (numPlayers == 2)
branch  0 taken 1331 (fallthrough)
branch  1 taken 2770
        -:   74:    {
     1331:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
     2770:   77:  else if (numPlayers == 3)
branch  0 taken 1411 (fallthrough)
branch  1 taken 1359
        -:   78:    {
     1411:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
     1359:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     4101:   87:  if (numPlayers == 2)
branch  0 taken 1331 (fallthrough)
branch  1 taken 2770
        -:   88:    {
     1331:   89:      state->supplyCount[estate] = 8;
     1331:   90:      state->supplyCount[duchy] = 8;
     1331:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
     2770:   95:      state->supplyCount[estate] = 12;
     2770:   96:      state->supplyCount[duchy] = 12;
     2770:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     4101:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     4101:  102:  state->supplyCount[silver] = 40;
     4101:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    86121:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 82020
branch  1 taken 4101 (fallthrough)
        -:  107:    {
   676665:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 635655
branch  1 taken 41010 (fallthrough)
        -:  109:	{
   635655:  110:	  if (kingdomCards[j] == i)
branch  0 taken 41010 (fallthrough)
branch  1 taken 594645
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    41010:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 41010 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 41010
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){
branch  0 never executed
branch  1 never executed
    #####:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    41010:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    41010:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   594645:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    16432:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 12331
branch  1 taken 4101 (fallthrough)
        -:  139:    {
    12331:  140:      state->deckCount[i] = 0;
    49324:  141:      for (j = 0; j < 3; j++)
branch  0 taken 36993
branch  1 taken 12331 (fallthrough)
        -:  142:	{
    36993:  143:	  state->deck[i][j] = estate;
    36993:  144:	  state->deckCount[i]++;
        -:  145:	}
    98648:  146:      for (j = 3; j < 10; j++)
branch  0 taken 86317
branch  1 taken 12331 (fallthrough)
        -:  147:	{
    86317:  148:	  state->deck[i][j] = copper;
    86317:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    16432:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 12331
branch  1 taken 4101 (fallthrough)
        -:  155:    {
    12331:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 12331
branch  1 taken 0 (fallthrough)
branch  2 taken 12331
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    16432:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 12331
branch  1 taken 4101 (fallthrough)
        -:  164:    {
        -:  165:      //initialize hand size to zero
    12331:  166:      state->handCount[i] = 0;
    12331:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
   114828:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 110727
branch  1 taken 4101 (fallthrough)
        -:  177:    {
   110727:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     4101:  182:  state->outpostPlayed = 0;
     4101:  183:  state->phase = 0;
     4101:  184:  state->numActions = 1;
     4101:  185:  state->numBuys = 1;
     4101:  186:  state->playedCardCount = 0;
     4101:  187:  state->whoseTurn = 0;
     4101:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    24606:  192:  for (it = 0; it < 5; it++){
branch  0 taken 20505
branch  1 taken 4101 (fallthrough)
    20505:  193:    drawCard(state->whoseTurn, state);
call    0 returned 20505
        -:  194:  }
        -:  195:
     4101:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 4101
        -:  197:
     4101:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 6442463265 returned 100% blocks executed 100%
6442463265:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
6442463265:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
6442463265:  209:  if (state->deckCount[player] < 1)
branch  0 taken 6442450934 (fallthrough)
branch  1 taken 12331
6442450934:  210:    return -1;
    12331:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 12331
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   147972:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 123310
branch  1 taken 12331 (fallthrough)
   123310:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 123310
   123310:  216:    newDeck[newDeckPos] = state->deck[player][card];
   123310:  217:    newDeckPos++;
   399915:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 276605
branch  1 taken 123310 (fallthrough)
   276605:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
   123310:  221:    state->deckCount[player]--;
        -:  222:  }
   135641:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 123310
branch  1 taken 12331 (fallthrough)
   123310:  224:    state->deck[player][i] = newDeck[i];
   123310:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    12331:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 5514 returned 100% blocks executed 100%
     5514:  346:int whoseTurn(struct gameState *state) {
     5514:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 6442476963 returned 100% blocks executed 85%
6442476963:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
6442476963:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 6442450934 (fallthrough)
branch  1 taken 26029
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
6442450934:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0
branch  1 taken 6442450934 (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
6442450934:  538:    state->deckCount[player] = state->discardCount[player];
6442450934:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
6442450934:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 6442450934
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
6442450934:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
6442450934:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
6442450934:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
6442450934:  559:    if (deckCounter == 0)
branch  0 taken 6442450934 (fallthrough)
branch  1 taken 0
6442450934:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    26029:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    26029:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    26029:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    26029:  576:    state->deckCount[player]--;
    26029:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    26029:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
    #####:  660:  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:
        -:  665:
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  668:    {
        -:  669:    case adventurer:
        -:  670:    //refactored adventurer card
    #####:  671:      adventurerCard(handPos, state);
call    0 never executed
    #####:  672:      return 0;
        -:  673:    //refactored council room card
        -:  674:    case council_room:
    #####:  675:      councilCard(handPos, state);
call    0 never executed
    #####:  676:      return 0;
        -:  677:
        -:  678:    case feast:
        -:  679:      //gain card with cost up to 5
        -:  680:      //Backup hand
    #####:  681:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  682:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  683:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  684:      }
        -:  685:      //Backup hand
        -:  686:
        -:  687:      //Update Coins for Buy
    #####:  688:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  689:      x = 1;//Condition to loop on
    #####:  690:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  691:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  692:	  if (DEBUG)
        -:  693:	    printf("None of that card left, sorry!\n");
        -:  694:
        -:  695:	  if (DEBUG){
        -:  696:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  697:	  }
        -:  698:	}
    #####:  699:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  700:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  701:
        -:  702:	  if (DEBUG){
        -:  703:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  704:	  }
        -:  705:	}
        -:  706:	else{
        -:  707:
        -:  708:	  if (DEBUG){
        -:  709:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  710:	  }
        -:  711:
    #####:  712:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  713:	  x = 0;//No more buying cards
        -:  714:
        -:  715:	  if (DEBUG){
        -:  716:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  717:	  }
        -:  718:
        -:  719:	}
        -:  720:      }
        -:  721:
        -:  722:      //Reset Hand
    #####:  723:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  724:	state->hand[currentPlayer][i] = temphand[i];
    #####:  725:	temphand[i] = -1;
        -:  726:      }
        -:  727:      //Reset Hand
        -:  728:
    #####:  729:      return 0;
        -:  730:
        -:  731:    case gardens:
    #####:  732:      return -1;
        -:  733:
        -:  734:    case mine:
    #####:  735:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  736:
    #####:  737:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  738:	{
    #####:  739:	  return -1;
        -:  740:	}
        -:  741:
    #####:  742:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  743:	{
    #####:  744:	  return -1;
        -:  745:	}
        -:  746:
    #####:  747:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  748:	{
    #####:  749:	  return -1;
        -:  750:	}
        -:  751:
    #####:  752:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  753:
        -:  754:      //discard card from hand
    #####:  755:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  756:
        -:  757:      //discard trashed card
    #####:  758:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  759:	{
    #####:  760:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  761:	    {
    #####:  762:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  763:	      break;
        -:  764:	    }
        -:  765:	}
        -:  766:
    #####:  767:      return 0;
        -:  768:
        -:  769:    case remodel:
    #####:  770:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  771:
    #####:  772:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  773:	{
    #####:  774:	  return -1;
        -:  775:	}
        -:  776:
    #####:  777:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  778:
        -:  779:      //discard card from hand
    #####:  780:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  781:
        -:  782:      //discard trashed card
    #####:  783:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  784:	{
    #####:  785:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  786:	    {
    #####:  787:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  788:	      break;
        -:  789:	    }
        -:  790:	}
        -:  791:
        -:  792:
    #####:  793:      return 0;
        -:  794:
        -:  795:    case smithy:
        -:  796://refactored smithy
    #####:  797:      smithyCard(handPos, state);
call    0 never executed
    #####:  798:      return 0;
        -:  799://refactored village
        -:  800:    case village:
    #####:  801:      villageCard(handPos, state);
call    0 never executed
    #####:  802:      return 0;
        -:  803:
        -:  804:    case baron:
    #####:  805:      state->numBuys++;//Increase buys by 1!
    #####:  806:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  807:	int p = 0;//Iterator for hand!
    #####:  808:	int card_not_discarded = 1;//Flag for discard set!
    #####:  809:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  810:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  811:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  812:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  813:	    state->discardCount[currentPlayer]++;
    #####:  814:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  815:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  816:	    }
    #####:  817:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  818:	    state->handCount[currentPlayer]--;
    #####:  819:	    card_not_discarded = 0;//Exit the loop
        -:  820:	  }
    #####:  821:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  822:	    if(DEBUG) {
        -:  823:	      printf("No estate cards in your hand, invalid choice\n");
        -:  824:	      printf("Must gain an estate if there are any\n");
        -:  825:	    }
    #####:  826:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  827:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  828:	      state->supplyCount[estate]--;//Decrement estates
    #####:  829:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  830:		isGameOver(state);
call    0 never executed
        -:  831:	      }
        -:  832:	    }
    #####:  833:	    card_not_discarded = 0;//Exit the loop
        -:  834:	  }
        -:  835:
        -:  836:	  else{
    #####:  837:	    p++;//Next card
        -:  838:	  }
        -:  839:	}
        -:  840:      }
        -:  841:
        -:  842:      else{
    #####:  843:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  844:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  845:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  846:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  847:	    isGameOver(state);
call    0 never executed
        -:  848:	  }
        -:  849:	}
        -:  850:      }
        -:  851:
        -:  852:
    #####:  853:      return 0;
        -:  854:
        -:  855:    case great_hall:
        -:  856:      //+1 Card
    #####:  857:      drawCard(currentPlayer, state);
call    0 never executed
        -:  858:
        -:  859:      //+1 Actions
    #####:  860:      state->numActions++;
        -:  861:
        -:  862:      //discard card from hand
    #####:  863:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  864:      return 0;
        -:  865:
        -:  866:    case minion:
    #####:  867:      minionCard(handPos, state, choice1, choice2);
call    0 never executed
    #####:  868:      return 0;
        -:  869:
        -:  870:    case steward:
    #####:  871:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  872:	{
        -:  873:	  //+2 cards
    #####:  874:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  875:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  876:	}
    #####:  877:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  878:	{
        -:  879:	  //+2 coins
    #####:  880:	  state->coins = state->coins + 2;
        -:  881:	}
        -:  882:      else
        -:  883:	{
        -:  884:	  //trash 2 cards in hand
    #####:  885:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  886:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  887:	}
        -:  888:
        -:  889:      //discard card from hand
    #####:  890:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  891:      return 0;
        -:  892:
        -:  893:    case tribute:
    #####:  894:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  895:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  896:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  897:	  state->deckCount[nextPlayer]--;
        -:  898:	}
    #####:  899:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  900:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  901:	  state->discardCount[nextPlayer]--;
        -:  902:	}
        -:  903:	else{
        -:  904:	  //No Card to Reveal
        -:  905:	  if (DEBUG){
        -:  906:	    printf("No cards to reveal\n");
        -:  907:	  }
        -:  908:	}
        -:  909:      }
        -:  910:
        -:  911:      else{
    #####:  912:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  913:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  914:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  915:	    state->deckCount[nextPlayer]++;
    #####:  916:	    state->discard[nextPlayer][i] = -1;
    #####:  917:	    state->discardCount[nextPlayer]--;
        -:  918:	  }
        -:  919:
    #####:  920:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  921:	}
    #####:  922:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  923:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  924:	state->deckCount[nextPlayer]--;
    #####:  925:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  926:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  927:	state->deckCount[nextPlayer]--;
        -:  928:      }
        -:  929:
    #####:  930:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####:  931:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  932:	state->playedCardCount++;
    #####:  933:	tributeRevealedCards[1] = -1;
        -:  934:      }
        -:  935:
    #####:  936:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  937:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  938:	  state->coins += 2;
        -:  939:	}
        -:  940:
    #####:  941:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  942:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  943:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  944:	}
        -:  945:	else{//Action Card
    #####:  946:	  state->numActions = state->numActions + 2;
        -:  947:	}
        -:  948:      }
        -:  949:
    #####:  950:      return 0;
        -:  951:
        -:  952:    case ambassador:
    #####:  953:      j = 0;		//used to check if player has enough cards to discard
        -:  954:
    #####:  955:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  956:	{
    #####:  957:	  return -1;
        -:  958:	}
        -:  959:
    #####:  960:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  961:	{
    #####:  962:	  return -1;
        -:  963:	}
        -:  964:
    #####:  965:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  966:	{
    #####:  967:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  968:	    {
    #####:  969:	      j++;
        -:  970:	    }
        -:  971:	}
    #####:  972:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  973:	{
    #####:  974:	  return -1;
        -:  975:	}
        -:  976:
        -:  977:      if (DEBUG)
        -:  978:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  979:
        -:  980:      //increase supply count for choosen card by amount being discarded
    #####:  981:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  982:
        -:  983:      //each other player gains a copy of revealed card
    #####:  984:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  985:	{
    #####:  986:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  987:	    {
    #####:  988:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  989:	    }
        -:  990:	}
        -:  991:
        -:  992:      //discard played card from hand
    #####:  993:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  994:
        -:  995:      //trash copies of cards returned to supply
    #####:  996:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  997:	{
    #####:  998:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  999:	    {
    #####: 1000:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1001:		{
    #####: 1002:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1003:		  break;
        -: 1004:		}
        -: 1005:	    }
        -: 1006:	}
        -: 1007:
    #####: 1008:      return 0;
        -: 1009:
        -: 1010:    case cutpurse:
        -: 1011:
    #####: 1012:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1013:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1014:	{
    #####: 1015:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1016:	    {
    #####: 1017:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1018:		{
    #####: 1019:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1020:		    {
    #####: 1021:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1022:		      break;
        -: 1023:		    }
    #####: 1024:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1025:		    {
    #####: 1026:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1027:			{
        -: 1028:			  if (DEBUG)
        -: 1029:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1030:			}
    #####: 1031:		      break;
        -: 1032:		    }
        -: 1033:		}
        -: 1034:
        -: 1035:	    }
        -: 1036:
        -: 1037:	}
        -: 1038:
        -: 1039:      //discard played card from hand
    #####: 1040:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1041:
    #####: 1042:      return 0;
        -: 1043:
        -: 1044:
        -: 1045:    case embargo:
        -: 1046:      //+2 Coins
    #####: 1047:      state->coins = state->coins + 2;
        -: 1048:
        -: 1049:      //see if selected pile is in play
    #####: 1050:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1051:	{
    #####: 1052:	  return -1;
        -: 1053:	}
        -: 1054:
        -: 1055:      //add embargo token to selected supply pile
    #####: 1056:      state->embargoTokens[choice1]++;
        -: 1057:
        -: 1058:      //trash card
    #####: 1059:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1060:      return 0;
        -: 1061:
        -: 1062:    case outpost:
        -: 1063:      //set outpost flag
    #####: 1064:      state->outpostPlayed++;
        -: 1065:
        -: 1066:      //discard card
    #####: 1067:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1068:      return 0;
        -: 1069:
        -: 1070:    case salvager:
        -: 1071:      //+1 buy
    #####: 1072:      state->numBuys++;
        -: 1073:
    #####: 1074:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1075:	{
        -: 1076:	  //gain coins equal to trashed card
    #####: 1077:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1078:	  //trash card
    #####: 1079:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1080:	}
        -: 1081:
        -: 1082:      //discard card
    #####: 1083:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1084:      return 0;
        -: 1085:
        -: 1086:    case sea_hag:
    #####: 1087:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1088:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1089:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1090:	  state->discardCount[i]++;
    #####: 1091:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1092:	}
        -: 1093:      }
    #####: 1094:      return 0;
        -: 1095:
        -: 1096:    case treasure_map:
        -: 1097:      //search hand for another treasure_map
    #####: 1098:      index = -1;
    #####: 1099:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1100:	{
    #####: 1101:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1102:	    {
    #####: 1103:	      index = i;
    #####: 1104:	      break;
        -: 1105:	    }
        -: 1106:	}
    #####: 1107:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1108:	{
        -: 1109:	  //trash both treasure cards
    #####: 1110:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1111:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1112:
        -: 1113:	  //gain 4 Gold cards
    #####: 1114:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1115:	    {
    #####: 1116:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1117:	    }
        -: 1118:
        -: 1119:	  //return success
    #####: 1120:	  return 1;
        -: 1121:	}
        -: 1122:
        -: 1123:      //no second treasure_map found in hand
    #####: 1124:      return -1;
        -: 1125:    }
        -: 1126:
    #####: 1127:  return -1;
        -: 1128:}
        -: 1129:
function discardCard called 5514 returned 100% blocks executed 89%
     5514: 1130:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1131:{
        -: 1132:
        -: 1133:  //if card is not trashed, added to Played pile
     5514: 1134:  if (trashFlag < 1)
branch  0 taken 3 (fallthrough)
branch  1 taken 5511
        -: 1135:    {
        -: 1136:      //add card to played pile
        3: 1137:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        3: 1138:      state->playedCardCount++;
        -: 1139:    }
        -: 1140:
        -: 1141:  //set played card to -1
     5514: 1142:  state->hand[currentPlayer][handPos] = -1;
        -: 1143:
        -: 1144:  //remove card from player's hand
     5514: 1145:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 44 (fallthrough)
branch  1 taken 5470
        -: 1146:    {
        -: 1147:      //reduce number of cards in hand
       44: 1148:      state->handCount[currentPlayer]--;
        -: 1149:    }
     5470: 1150:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 5470
        -: 1151:    {
        -: 1152:      //reduce number of cards in hand
    #####: 1153:      state->handCount[currentPlayer]--;
        -: 1154:    }
        -: 1155:  else
        -: 1156:    {
        -: 1157:      //replace discarded card with last card in hand
     5470: 1158:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1159:      //set last card to -1
     5470: 1160:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1161:      //reduce number of cards in hand
     5470: 1162:      state->handCount[currentPlayer]--;
        -: 1163:    }
        -: 1164:
     5514: 1165:  return 0;
        -: 1166:}
        -: 1167:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1168:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1169:{
        -: 1170:  //Note: supplyPos is enum of choosen card
        -: 1171:
        -: 1172:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1173:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1174:    {
    #####: 1175:      return -1;
        -: 1176:    }
        -: 1177:
        -: 1178:  //added card for [whoseTurn] current player:
        -: 1179:  // toFlag = 0 : add to discard
        -: 1180:  // toFlag = 1 : add to deck
        -: 1181:  // toFlag = 2 : add to hand
        -: 1182:
    #####: 1183:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1184:    {
    #####: 1185:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1186:      state->deckCount[player]++;
        -: 1187:    }
    #####: 1188:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1189:    {
    #####: 1190:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1191:      state->handCount[player]++;
        -: 1192:    }
        -: 1193:  else
        -: 1194:    {
    #####: 1195:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1196:      state->discardCount[player]++;
        -: 1197:    }
        -: 1198:
        -: 1199:  //decrease number in supply pile
    #####: 1200:  state->supplyCount[supplyPos]--;
        -: 1201:
    #####: 1202:  return 0;
        -: 1203:}
        -: 1204:
function updateCoins called 4101 returned 100% blocks executed 82%
     4101: 1205:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1206:{
        -: 1207:  int i;
        -: 1208:
        -: 1209:  //reset coin count
     4101: 1210:  state->coins = 0;
        -: 1211:
        -: 1212:  //add coins for each Treasure card in player's hand
    24606: 1213:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 20505
branch  1 taken 4101 (fallthrough)
        -: 1214:    {
    20505: 1215:      if (state->hand[player][i] == copper)
branch  0 taken 14345 (fallthrough)
branch  1 taken 6160
        -: 1216:	{
    14345: 1217:	  state->coins += 1;
        -: 1218:	}
     6160: 1219:      else if (state->hand[player][i] == silver)
branch  0 taken 0 (fallthrough)
branch  1 taken 6160
        -: 1220:	{
    #####: 1221:	  state->coins += 2;
        -: 1222:	}
     6160: 1223:      else if (state->hand[player][i] == gold)
branch  0 taken 0 (fallthrough)
branch  1 taken 6160
        -: 1224:	{
    #####: 1225:	  state->coins += 3;
        -: 1226:	}
        -: 1227:    }
        -: 1228:
        -: 1229:  //add bonus
     4101: 1230:  state->coins += bonus;
        -: 1231:
     4101: 1232:  return 0;
        -: 1233:}
        -: 1234://REFRACTORED CARDS
        -: 1235:// #1 required - smithy
        -: 1236:
        -: 1237://bug change i++ in the for loop to i--, makes it so you draw a crap ton of cards
function smithyCard called 3 returned 100% blocks executed 100%
        3: 1238:void smithyCard(int handPos, struct gameState *state){
        3: 1239:    int currentPlayer = whoseTurn(state);//get current player
call    0 returned 3
        -: 1240:    int i;
        -: 1241:    //draw 3 cards
6442450950: 1242:    for (i = 0; i < 3; i--){
branch  0 taken 6442450947
branch  1 taken 3 (fallthrough)
6442450947: 1243:      drawCard(currentPlayer, state);
call    0 returned 6442450947
        -: 1244:    }
        -: 1245:    //discard card from hand
        3: 1246:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 3
        -: 1247:
        3: 1248:}
        -: 1249://#2 required - adventurer
        -: 1250://bug set z = 1 instead of 0, it screws up the counter
        -: 1251://bug changed drawntreasure<2 to 1, make it so you can't draw more treasure
function adventurerCard called 0 returned 0% blocks executed 0%
    #####: 1252:void adventurerCard(int handPos, struct gameState *state){
    #####: 1253:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####: 1254:  int nextPlayer = currentPlayer + 1;
        -: 1255:  int temphand[MAX_HAND];
    #####: 1256:  int drawntreasure = 0;
        -: 1257:  int cardDrawn;
    #####: 1258:  int z = 1; //counter for temp hand
        -: 1259:
    #####: 1260:  while(drawntreasure<1){
branch  0 never executed
branch  1 never executed
    #####: 1261:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####: 1262:      shuffle(currentPlayer, state);
call    0 never executed
        -: 1263:    }
    #####: 1264:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1265:
    #####: 1266:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1267:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1268:      drawntreasure++;
        -: 1269:      else{
    #####: 1270:        temphand[z]=cardDrawn;
    #####: 1271:        state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1272:        z++;
        -: 1273:      }
        -: 1274:  }
        -: 1275:
    #####: 1276:  while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####: 1277:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1278:    z=z-1;
        -: 1279:  }
    #####: 1280:}
        -: 1281:
        -: 1282:// #3 - council_room
        -: 1283://bug changed first for loop to i <= 4, draws one extra card
function councilCard called 0 returned 0% blocks executed 0%
    #####: 1284:void councilCard(int handPos, struct gameState *state){
        -: 1285:  int i;
    #####: 1286:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1287:
        -: 1288:  //+4 cards
    #####: 1289:  for ( i = 0; i <= 4; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1290:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1291:  }
        -: 1292:  //+1 buy
    #####: 1293:  state->numBuys++;
        -: 1294://each other player draws a card
    #####: 1295:  for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1296:    if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1297:      drawCard(i, state);
call    0 never executed
        -: 1298:    }
        -: 1299:  }
    #####: 1300:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1301:
    #####: 1302:}
        -: 1303:
        -: 1304:// #4 - village
        -: 1305://bug changed the discardCard parameter to 1 instead of 0, throws it away from players deck
function villageCard called 5511 returned 100% blocks executed 100%
     5511: 1306:void villageCard(int handPos, struct gameState *state){
     5511: 1307:  int currentPlayer = whoseTurn(state);
call    0 returned 5511
        -: 1308:
        -: 1309:  //+1 card
     5511: 1310:  drawCard(currentPlayer, state);
call    0 returned 5511
        -: 1311:
        -: 1312:  //+2 actions
     5511: 1313:  state->numActions = state->numActions + 2;
        -: 1314:
        -: 1315:  //discard played card from handPos
     5511: 1316:  discardCard(handPos, currentPlayer, state, 1);
call    0 returned 5511
        -: 1317:
        -: 1318:
     5511: 1319:}
        -: 1320:
        -: 1321://#5 - minion
function minionCard called 0 returned 0% blocks executed 0%
    #####: 1322:void minionCard(int handPos, struct gameState *state, int choice1, int choice2){
    #####: 1323:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1324:  int i;
        -: 1325:  int j;
        -: 1326:
        -: 1327:  //+1 actions
    #####: 1328:  state->numActions++;
        -: 1329:
        -: 1330:  //discard card from hand
    #####: 1331:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1332:  //+2 coins
    #####: 1333:  if (choice1){
branch  0 never executed
branch  1 never executed
    #####: 1334:    state->coins = state->coins + 2;
        -: 1335:  }
    #####: 1336:  else if (choice2){ // discoard hand, redraw 4, other player with 5+ cards hand and draw four
branch  0 never executed
branch  1 never executed
    #####: 1337:    while(numHandCards(state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1338:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1339:    }
        -: 1340:    //draw 4
    #####: 1341:    for(i = 0; i < 4; i++){
branch  0 never executed
branch  1 never executed
    #####: 1342:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1343:    }
        -: 1344:    //other players discard hand and redraw if handsize >4
    #####: 1345:    for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1346:      if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1347:        if (state->handCount[i] > 4){
branch  0 never executed
branch  1 never executed
    #####: 1348:          while( state->handCount[i] > 0 ){
branch  0 never executed
branch  1 never executed
    #####: 1349:            discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1350:          }
    #####: 1351:          for (j = 0; j < 4; j++){
branch  0 never executed
branch  1 never executed
    #####: 1352:            drawCard(i, state);
call    0 never executed
        -: 1353:          }
        -: 1354:        }
        -: 1355:      }
        -: 1356:    }
        -: 1357:  }
    #####: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
