----------------- Testing Card: smithy ----------------
RANDOM TESTS.
TEST # 0: 
+3 Cards and discard smithy
hand count = 7, expected = 12
TEST: +2 Net Gain of Cards Failed
Check it came from player's Deck 
deck count = 2, expected = 440
TEST: Player drew from own deck Failed
Check to make sure smithy was discarded after being played
played count = 1, expected = 2
TEST: Smithy was the used card Failed
Check to make sure its still the player's turn
expected player = 0, current player = 0
Check to see after playing the card there are no more actions
TEST # 1: 
+3 Cards and discard smithy
hand count = 0, expected = 433
TEST: +2 Net Gain of Cards Failed
Check it came from player's Deck 
deck count = 10, expected = 49
TEST: Player drew from own deck Failed
Check to make sure smithy was discarded after being played
played count = 1, expected = 2
TEST: Smithy was the used card Failed
Check to make sure its still the player's turn
expected player = 0, current player = 0
Check to see after playing the card there are no more actions

 >>>>> Only 6 / 3000 tests have passed

File 'dominion.c'
Lines executed:38.30% of 577
Branches executed:39.57% of 417
Taken at least once:24.22% of 417
Calls executed:32.67% of 101
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:10
        -:    0:Programs:10
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 360 returned 100% blocks executed 83%
      360:    8:int compare(const void* a, const void* b) {
      360:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 360
    #####:   10:    return 1;
      360:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 96 (fallthrough)
branch  1 taken 264
       96:   12:    return -1;
      264:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:      int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 11 returned 100% blocks executed 88%
       11:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:       struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;     
        -:   43:  //set up random number generator
       11:   44:  SelectStream(1);
call    0 returned 11
       11:   45:  PutSeed((long)randomSeed);
call    0 returned 11
        -:   46:  
        -:   47:  //check number of players
       11:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 11 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 11
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       11:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      121:   57:  for (i = 0; i < 10; i++)
branch  0 taken 110
branch  1 taken 11 (fallthrough)
        -:   58:    {
     1210:   59:      for (j = 0; j < 10; j++)
branch  0 taken 1100
branch  1 taken 110 (fallthrough)
        -:   60:        {
     1100:   61:    if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 990 (fallthrough)
branch  1 taken 110
branch  2 taken 0 (fallthrough)
branch  3 taken 990
        -:   62:      {
    #####:   63:        return -1;
        -:   64:      }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       11:   73:  if (numPlayers == 2)
branch  0 taken 10 (fallthrough)
branch  1 taken 1
        -:   74:    {
       10:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        1:   77:  else if (numPlayers == 3)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        1:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       11:   87:  if (numPlayers == 2)
branch  0 taken 10 (fallthrough)
branch  1 taken 1
        -:   88:    {
       10:   89:      state->supplyCount[estate] = 8;
       10:   90:      state->supplyCount[duchy] = 8;
       10:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        1:   95:      state->supplyCount[estate] = 12;
        1:   96:      state->supplyCount[duchy] = 12;
        1:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       11:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       11:  102:  state->supplyCount[silver] = 40;
       11:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      231:  106:  for (i = adventurer; i <= treasure_map; i++)        //loop all cards
branch  0 taken 220
branch  1 taken 11 (fallthrough)
        -:  107:    {
     1815:  108:      for (j = 0; j < 10; j++)              //loop chosen cards
branch  0 taken 1705
branch  1 taken 110 (fallthrough)
        -:  109:  {
     1705:  110:    if (kingdomCards[j] == i)
branch  0 taken 110 (fallthrough)
branch  1 taken 1595
        -:  111:      {
        -:  112:        //check if card is a 'Victory' Kingdom card
      110:  113:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 110 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 110
        -:  114:    {
    #####:  115:      if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  116:        state->supplyCount[i] = 8; 
        -:  117:      }
    #####:  118:      else{ state->supplyCount[i] = 12; }
        -:  119:    }
        -:  120:        else
        -:  121:    {
      110:  122:      state->supplyCount[i] = 10;
        -:  123:    }
      110:  124:        break;
        -:  125:      }
        -:  126:    else    //card is not in the set choosen for the game
        -:  127:      {
     1595:  128:        state->supplyCount[i] = -1;
        -:  129:      }
        -:  130:  }
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       35:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 24
branch  1 taken 11 (fallthrough)
        -:  139:    {
       24:  140:      state->deckCount[i] = 0;
       96:  141:      for (j = 0; j < 3; j++)
branch  0 taken 72
branch  1 taken 24 (fallthrough)
        -:  142:  {
       72:  143:    state->deck[i][j] = estate;
       72:  144:    state->deckCount[i]++;
        -:  145:  }
      192:  146:      for (j = 3; j < 10; j++)
branch  0 taken 168
branch  1 taken 24 (fallthrough)
        -:  147:  {
      168:  148:    state->deck[i][j] = copper;
      168:  149:    state->deckCount[i]++;    
        -:  150:  }
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       35:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 24
branch  1 taken 11 (fallthrough)
        -:  155:    {
       24:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 24
branch  1 taken 0 (fallthrough)
branch  2 taken 24
        -:  157:  {
    #####:  158:    return -1;
        -:  159:  }
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       35:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 24
branch  1 taken 11 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       24:  166:      state->handCount[i] = 0;
       24:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //  {
        -:  171:      //    drawCard(i, state);
        -:  172:      //  }
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      308:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 297
branch  1 taken 11 (fallthrough)
        -:  177:    {
      297:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       11:  182:  state->outpostPlayed = 0;
       11:  183:  state->phase = 0;
       11:  184:  state->numActions = 1;
       11:  185:  state->numBuys = 1;
       11:  186:  state->playedCardCount = 0;
       11:  187:  state->whoseTurn = 0;
       11:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       66:  192:  for (it = 0; it < 5; it++){
branch  0 taken 55
branch  1 taken 11 (fallthrough)
       55:  193:    drawCard(state->whoseTurn, state);
call    0 returned 55
        -:  194:  }
        -:  195:
       11:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 11
        -:  197:
       11:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 24 returned 100% blocks executed 94%
       24:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       24:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       24:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####:  210:    return -1;
       24:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 24
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      288:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 240
branch  1 taken 24 (fallthrough)
      240:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 240
      240:  216:    newDeck[newDeckPos] = state->deck[player][card];
      240:  217:    newDeckPos++;
      805:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 565
branch  1 taken 240 (fallthrough)
      565:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      240:  221:    state->deckCount[player]--;
        -:  222:  }
      264:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 240
branch  1 taken 24 (fallthrough)
      240:  224:    state->deck[player][i] = newDeck[i];
      240:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       24:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{ 
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0;     //tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:  
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:  
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:  
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:  
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:  
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:  
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 4 returned 100% blocks executed 100%
        4:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        4:  280:  who = state->whoseTurn;
        -:  281:
        4:  282:  if (state->numBuys < 1){
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
        3:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 3
branch  1 taken 1 (fallthrough)
branch  2 taken 2
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        1:  289:    return -1;
        2:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  293:    return -1;
        -:  294:  } else {
        1:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        1:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 1
        -:  298:  
        1:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 1
        1:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        1:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 5 returned 100% blocks executed 100%
        5:  320:int supplyCount(int card, struct gameState *state) {
        5:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 16 returned 100% blocks executed 100%
       16:  346:int whoseTurn(struct gameState *state) {
       16:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 2 returned 100% blocks executed 100%
        2:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        2:  353:  int currentPlayer = whoseTurn(state);
call    0 returned 2
        -:  354:  
        -:  355:  //Discard hand
       12:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 10
branch  1 taken 2 (fallthrough)
       10:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       10:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
        2:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
        2:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
        1:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        2:  370:  state->outpostPlayed = 0;
        2:  371:  state->phase = 0;
        2:  372:  state->numActions = 1;
        2:  373:  state->coins = 0;
        2:  374:  state->numBuys = 1;
        2:  375:  state->playedCardCount = 0;
        2:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
       12:  380:  for (k = 0; k < 5; k++){
branch  0 taken 10
branch  1 taken 2 (fallthrough)
       10:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 10
        -:  382:  }
        -:  383:
        -:  384:  //Update money
        2:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 2
        -:  386:
        2:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 6 returned 100% blocks executed 100%
        6:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:  
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 1 (fallthrough)
branch  1 taken 5
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        5:  401:  j = 0;
      130:  402:  for (i = 0; i < 25; i++)
branch  0 taken 125
branch  1 taken 5 (fallthrough)
        -:  403:    {
      125:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 3 (fallthrough)
branch  1 taken 122
        -:  405:  {
        3:  406:    j++;
        -:  407:  }
        -:  408:    }
        5:  409:  if ( j >= 3)
branch  0 taken 1 (fallthrough)
branch  1 taken 4
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        4:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;  
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:  {
    #####:  469:    players[i] = -9999;
        -:  470:  }
        -:  471:      else
        -:  472:  {
    #####:  473:    players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:  }
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:  {
    #####:  483:    j = i;
        -:  484:  }
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:  {
    #####:  494:    players[i]++;
        -:  495:  }
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:  {
    #####:  504:    j = i;
        -:  505:  }
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:  {
    #####:  514:    players[i] = 1;
        -:  515:  }
        -:  516:      else
        -:  517:  {
    #####:  518:    players[i] = 0;
        -:  519:  }
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 84 returned 100% blocks executed 38%
       84:  525:int drawCard(int player, struct gameState *state)
        -:  526:{ int count;
        -:  527:  int deckCounter;
       84:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0 (fallthrough)
branch  1 taken 84
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       84:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       84:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       84:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       84:  576:    state->deckCount[player]--;
       84:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       84:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 3 returned 100% blocks executed 10%
        3:  583:int getCost(int cardNumber)
        -:  584:{
        3:  585:  switch( cardNumber ) 
branch  0 taken 0
branch  1 taken 0
branch  2 taken 0
branch  3 taken 3
branch  4 taken 0
branch  5 taken 0
branch  6 taken 0
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
branch 21 taken 0
branch 22 taken 0
branch 23 taken 0
branch 24 taken 0
branch 25 taken 0
branch 26 taken 0
branch 27 taken 0
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
        3:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:  
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 4 returned 100% blocks executed 6%
        4:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
        4:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 4
        4:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        4:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        4:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
        4:  660:  int z = 0;// this is the counter for the temp hand
        4:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:  
        -:  666:  //uses switch to select card and perform actions
        4:  667:  switch( card ) 
branch  0 taken 1
branch  1 taken 1
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 1
branch  7 taken 1
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  668:    {
        -:  669:    case adventurer:
        1:  670:      call_adventurer(state, handPos);
call    0 returned 1
        1:  671:      return 0;
        -:  672:      
        -:  673:    case council_room:
        1:  674:      call_council_room(state, handPos);
call    0 returned 1
        1:  675:      return 0;
        -:  676:      
        -:  677:    case feast:
        -:  678:      //gain card with cost up to 5
        -:  679:      //Backup hand
    #####:  680:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  681:  temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  682:  state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  683:      }
        -:  684:      //Backup hand
        -:  685:
        -:  686:      //Update Coins for Buy
    #####:  687:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  688:      x = 1;//Condition to loop on
    #####:  689:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  690:  if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  691:    if (DEBUG)
        -:  692:      printf("None of that card left, sorry!\n");
        -:  693:
        -:  694:    if (DEBUG){
        -:  695:      printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  696:    }
        -:  697:  }
    #####:  698:  else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  699:    printf("That card is too expensive!\n");
call    0 never executed
        -:  700:
        -:  701:    if (DEBUG){
        -:  702:      printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  703:    }
        -:  704:  }
        -:  705:  else{
        -:  706:
        -:  707:    if (DEBUG){
        -:  708:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  709:    }
        -:  710:
    #####:  711:    gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  712:    x = 0;//No more buying cards
        -:  713:
        -:  714:    if (DEBUG){
        -:  715:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  716:    }
        -:  717:
        -:  718:  }
        -:  719:      }     
        -:  720:
        -:  721:      //Reset Hand
    #####:  722:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  723:  state->hand[currentPlayer][i] = temphand[i];
    #####:  724:  temphand[i] = -1;
        -:  725:      }
        -:  726:      //Reset Hand
        -:  727:            
    #####:  728:      return 0;
        -:  729:      
        -:  730:    case gardens:
    #####:  731:      return -1;
        -:  732:      
        -:  733:    case mine:
    #####:  734:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  735:
    #####:  736:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  737:  {
    #####:  738:    return -1;
        -:  739:  }
        -:  740:    
    #####:  741:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  742:  {
    #####:  743:    return -1;
        -:  744:  }
        -:  745:
    #####:  746:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  747:  {
    #####:  748:    return -1;
        -:  749:  }
        -:  750:
    #####:  751:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  752:
        -:  753:      //discard card from hand
    #####:  754:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  755:
        -:  756:      //discard trashed card
    #####:  757:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  758:  {
    #####:  759:    if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  760:      {
    #####:  761:        discardCard(i, currentPlayer, state, 0);      
call    0 never executed
    #####:  762:        break;
        -:  763:      }
        -:  764:  }
        -:  765:      
    #####:  766:      return 0;
        -:  767:      
        -:  768:    case remodel:
    #####:  769:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  770:
    #####:  771:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  772:  {
    #####:  773:    return -1;
        -:  774:  }
        -:  775:
    #####:  776:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  777:
        -:  778:      //discard card from hand
    #####:  779:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  780:
        -:  781:      //discard trashed card
    #####:  782:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  783:  {
    #####:  784:    if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  785:      {
    #####:  786:        discardCard(i, currentPlayer, state, 0);      
call    0 never executed
    #####:  787:        break;
        -:  788:      }
        -:  789:  }
        -:  790:
        -:  791:
    #####:  792:      return 0;
        -:  793:    
        -:  794:    case smithy:
        1:  795:      call_smithy(state, handPos);
call    0 returned 1
        1:  796:      return 0;
        -:  797:    
        -:  798:    case village:
        1:  799:      call_village(state, handPos);
call    0 returned 1
        1:  800:      return 0;
        -:  801:    
        -:  802:    case baron:
    #####:  803:      state->numBuys++;//Increase buys by 1!
    #####:  804:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  805:  int p = 0;//Iterator for hand!
    #####:  806:  int card_not_discarded = 1;//Flag for discard set!
    #####:  807:  while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  808:    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  809:      state->coins += 4;//Add 4 coins to the amount of coins
    #####:  810:      state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  811:      state->discardCount[currentPlayer]++;
    #####:  812:      for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  813:        state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  814:      }
    #####:  815:      state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  816:      state->handCount[currentPlayer]--;
    #####:  817:      card_not_discarded = 0;//Exit the loop
        -:  818:    }
    #####:  819:    else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  820:      if(DEBUG) {
        -:  821:        printf("No estate cards in your hand, invalid choice\n");
        -:  822:        printf("Must gain an estate if there are any\n");
        -:  823:      }
    #####:  824:      if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  825:        gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  826:        state->supplyCount[estate]--;//Decrement estates
    #####:  827:        if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  828:    isGameOver(state);
call    0 never executed
        -:  829:        }
        -:  830:      }
    #####:  831:      card_not_discarded = 0;//Exit the loop
        -:  832:    }
        -:  833:          
        -:  834:    else{
    #####:  835:      p++;//Next card
        -:  836:    }
        -:  837:  }
        -:  838:      }
        -:  839:          
        -:  840:      else{
    #####:  841:  if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  842:    gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  843:    state->supplyCount[estate]--;//Decrement Estates
    #####:  844:    if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  845:      isGameOver(state);
call    0 never executed
        -:  846:    }
        -:  847:  }
        -:  848:      }
        -:  849:      
        -:  850:      
    #####:  851:      return 0;
        -:  852:    
        -:  853:    case great_hall:
    #####:  854:      call_great_hall(state, handPos);
call    0 never executed
    #####:  855:      return 0;
        -:  856:    
        -:  857:    case minion:
        -:  858:      //+1 action
    #####:  859:      state->numActions++;
        -:  860:      
        -:  861:      //discard card from hand
    #####:  862:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  863:      
    #####:  864:      if (choice1)    //+2 coins
branch  0 never executed
branch  1 never executed
        -:  865:  {
    #####:  866:    state->coins = state->coins + 2;
        -:  867:  }
        -:  868:      
    #####:  869:      else if (choice2)   //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  870:  {
        -:  871:    //discard hand
    #####:  872:    while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  873:      {
    #####:  874:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  875:      }
        -:  876:        
        -:  877:    //draw 4
    #####:  878:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  879:      {
    #####:  880:        drawCard(currentPlayer, state);
call    0 never executed
        -:  881:      }
        -:  882:        
        -:  883:    //other players discard hand and redraw if hand size > 4
    #####:  884:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  885:      {
    #####:  886:        if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  887:    {
    #####:  888:      if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  889:        {
        -:  890:          //discard hand
    #####:  891:          while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  892:      {
    #####:  893:        discardCard(handPos, i, state, 0);
call    0 never executed
        -:  894:      }
        -:  895:              
        -:  896:          //draw 4
    #####:  897:          for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  898:      {
    #####:  899:        drawCard(i, state);
call    0 never executed
        -:  900:      }
        -:  901:        }
        -:  902:    }
        -:  903:      }
        -:  904:        
        -:  905:  }
    #####:  906:      return 0;
        -:  907:    
        -:  908:    case steward:
    #####:  909:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  910:  {
        -:  911:    //+2 cards
    #####:  912:    drawCard(currentPlayer, state);
call    0 never executed
    #####:  913:    drawCard(currentPlayer, state);
call    0 never executed
        -:  914:  }
    #####:  915:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  916:  {
        -:  917:    //+2 coins
    #####:  918:    state->coins = state->coins + 2;
        -:  919:  }
        -:  920:      else
        -:  921:  {
        -:  922:    //trash 2 cards in hand
    #####:  923:    discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  924:    discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  925:  }
        -:  926:      
        -:  927:      //discard card from hand
    #####:  928:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  929:      return 0;
        -:  930:    
        -:  931:    case tribute:
    #####:  932:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  933:  if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  934:    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  935:    state->deckCount[nextPlayer]--;
        -:  936:  }
    #####:  937:  else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  938:    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  939:    state->discardCount[nextPlayer]--;
        -:  940:  }
        -:  941:  else{
        -:  942:    //No Card to Reveal
        -:  943:    if (DEBUG){
        -:  944:      printf("No cards to reveal\n");
        -:  945:    }
        -:  946:  }
        -:  947:      }
        -:  948:      
        -:  949:      else{
    #####:  950:  if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  951:    for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  952:      state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  953:      state->deckCount[nextPlayer]++;
    #####:  954:      state->discard[nextPlayer][i] = -1;
    #####:  955:      state->discardCount[nextPlayer]--;
        -:  956:    }
        -:  957:          
    #####:  958:    shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  959:  } 
    #####:  960:  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  961:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  962:  state->deckCount[nextPlayer]--;
    #####:  963:  tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  964:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  965:  state->deckCount[nextPlayer]--;
        -:  966:      }    
        -:  967:           
    #####:  968:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  969:  state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  970:  state->playedCardCount++;
    #####:  971:  tributeRevealedCards[1] = -1;
        -:  972:      }
        -:  973:
    #####:  974:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  975:  if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  976:    state->coins += 2;
        -:  977:  }
        -:  978:        
    #####:  979:  else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  980:    drawCard(currentPlayer, state);
call    0 never executed
    #####:  981:    drawCard(currentPlayer, state);
call    0 never executed
        -:  982:  }
        -:  983:  else{//Action Card
    #####:  984:    state->numActions = state->numActions + 2;
        -:  985:  }
        -:  986:      }
        -:  987:      
    #####:  988:      return 0;
        -:  989:    
        -:  990:    case ambassador:
    #####:  991:      j = 0;    //used to check if player has enough cards to discard
        -:  992:
    #####:  993:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  994:  {
    #####:  995:    return -1;        
        -:  996:  }
        -:  997:
    #####:  998:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  999:  {
    #####: 1000:    return -1;
        -: 1001:  }
        -: 1002:
    #####: 1003:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1004:  {
    #####: 1005:    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1006:      {
    #####: 1007:        j++;
        -: 1008:      }
        -: 1009:  }
    #####: 1010:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1011:  {
    #####: 1012:    return -1;        
        -: 1013:  }
        -: 1014:
        -: 1015:      if (DEBUG) 
        -: 1016:  printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1017:
        -: 1018:      //increase supply count for choosen card by amount being discarded
    #####: 1019:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1020:      
        -: 1021:      //each other player gains a copy of revealed card
    #####: 1022:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1023:  {
    #####: 1024:    if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1025:      {
    #####: 1026:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1027:      }
        -: 1028:  }
        -: 1029:
        -: 1030:      //discard played card from hand
    #####: 1031:      discardCard(handPos, currentPlayer, state, 0);      
call    0 never executed
        -: 1032:
        -: 1033:      //trash copies of cards returned to supply
    #####: 1034:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1035:  {
    #####: 1036:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1037:      {
    #####: 1038:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1039:    {
    #####: 1040:      discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1041:      break;
        -: 1042:    }
        -: 1043:      }
        -: 1044:  }     
        -: 1045:
    #####: 1046:      return 0;
        -: 1047:    
        -: 1048:    case cutpurse:
        -: 1049:
    #####: 1050:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1051:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1052:  {
    #####: 1053:    if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1054:      {
    #####: 1055:        for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1056:    {
    #####: 1057:      if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1058:        {
    #####: 1059:          discardCard(j, i, state, 0);
call    0 never executed
    #####: 1060:          break;
        -: 1061:        }
    #####: 1062:      if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1063:        {
    #####: 1064:          for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1065:      {
        -: 1066:        if (DEBUG)
        -: 1067:          printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1068:      } 
    #####: 1069:          break;
        -: 1070:        }   
        -: 1071:    }
        -: 1072:          
        -: 1073:      }
        -: 1074:        
        -: 1075:  }       
        -: 1076:
        -: 1077:      //discard played card from hand
    #####: 1078:      discardCard(handPos, currentPlayer, state, 0);      
call    0 never executed
        -: 1079:
    #####: 1080:      return 0;
        -: 1081:
        -: 1082:    
        -: 1083:    case embargo: 
        -: 1084:      //+2 Coins
    #####: 1085:      state->coins = state->coins + 2;
        -: 1086:      
        -: 1087:      //see if selected pile is in play
    #####: 1088:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1089:  {
    #####: 1090:    return -1;
        -: 1091:  }
        -: 1092:      
        -: 1093:      //add embargo token to selected supply pile
    #####: 1094:      state->embargoTokens[choice1]++;
        -: 1095:      
        -: 1096:      //trash card
    #####: 1097:      discardCard(handPos, currentPlayer, state, 1);    
call    0 never executed
    #####: 1098:      return 0;
        -: 1099:    
        -: 1100:    case outpost:
        -: 1101:      //set outpost flag
    #####: 1102:      state->outpostPlayed++;
        -: 1103:      
        -: 1104:      //discard card
    #####: 1105:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1106:      return 0;
        -: 1107:    
        -: 1108:    case salvager:
        -: 1109:      //+1 buy
    #####: 1110:      state->numBuys++;
        -: 1111:      
    #####: 1112:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1113:  {
        -: 1114:    //gain coins equal to trashed card
    #####: 1115:    state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1116:    //trash card
    #####: 1117:    discardCard(choice1, currentPlayer, state, 1);  
call    0 never executed
        -: 1118:  }
        -: 1119:      
        -: 1120:      //discard card
    #####: 1121:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1122:      return 0;
        -: 1123:    
        -: 1124:    case sea_hag:
    #####: 1125:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1126:  if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1127:    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];          state->deckCount[i]--;
    #####: 1128:    state->discardCount[i]++;
    #####: 1129:    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1130:  }
        -: 1131:      }
    #####: 1132:      return 0;
        -: 1133:    
        -: 1134:    case treasure_map:
        -: 1135:      //search hand for another treasure_map
    #####: 1136:      index = -1;
    #####: 1137:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1138:  {
    #####: 1139:    if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1140:      {
    #####: 1141:        index = i;
    #####: 1142:        break;
        -: 1143:      }
        -: 1144:  }
    #####: 1145:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1146:  {
        -: 1147:    //trash both treasure cards
    #####: 1148:    discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1149:    discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1150:
        -: 1151:    //gain 4 Gold cards
    #####: 1152:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1153:      {
    #####: 1154:        gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1155:      }
        -: 1156:        
        -: 1157:    //return success
    #####: 1158:    return 1;
        -: 1159:  }
        -: 1160:      
        -: 1161:      //no second treasure_map found in hand
    #####: 1162:      return -1;
        -: 1163:    }
        -: 1164:  
    #####: 1165:  return -1;
        -: 1166:}
        -: 1167:
function discardCard called 7 returned 100% blocks executed 78%
        7: 1168:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1169:{
        -: 1170:  
        -: 1171:  //if card is not trashed, added to Played pile 
        7: 1172:  if (trashFlag < 1)
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        -: 1173:    {
        -: 1174:      //add card to played pile
        7: 1175:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        7: 1176:      state->playedCardCount++;
        -: 1177:    }
        -: 1178:  
        -: 1179:  //set played card to -1
        7: 1180:  state->hand[currentPlayer][handPos] = -1;
        -: 1181:  
        -: 1182:  //remove card from player's hand
        7: 1183:  if ( handPos == (state->handCount[currentPlayer] - 1) )   //last card in hand array is played
branch  0 taken 0 (fallthrough)
branch  1 taken 7
        -: 1184:    {
        -: 1185:      //reduce number of cards in hand
    #####: 1186:      state->handCount[currentPlayer]--;
        -: 1187:    }
        7: 1188:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 7
        -: 1189:    {
        -: 1190:      //reduce number of cards in hand
    #####: 1191:      state->handCount[currentPlayer]--;
        -: 1192:    }
        -: 1193:  else  
        -: 1194:    {
        -: 1195:      //replace discarded card with last card in hand
        7: 1196:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1197:      //set last card to -1
        7: 1198:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1199:      //reduce number of cards in hand
        7: 1200:      state->handCount[currentPlayer]--;
        -: 1201:    }
        -: 1202:  
        7: 1203:  return 0;
        -: 1204:}
        -: 1205:
function gainCard called 1 returned 100% blocks executed 70%
        1: 1206:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1207:{
        -: 1208:  //Note: supplyPos is enum of choosen card
        -: 1209:  
        -: 1210:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1211:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -: 1212:    {
    #####: 1213:      return -1;
        -: 1214:    }
        -: 1215:  
        -: 1216:  //added card for [whoseTurn] current player:
        -: 1217:  // toFlag = 0 : add to discard
        -: 1218:  // toFlag = 1 : add to deck
        -: 1219:  // toFlag = 2 : add to hand
        -: 1220:
        1: 1221:  if (toFlag == 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 1222:    {
    #####: 1223:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1224:      state->deckCount[player]++;
        -: 1225:    }
        1: 1226:  else if (toFlag == 2)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 1227:    {
    #####: 1228:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1229:      state->handCount[player]++;
        -: 1230:    }
        -: 1231:  else
        -: 1232:    {
        1: 1233:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1234:      state->discardCount[player]++;
        -: 1235:    }
        -: 1236:  
        -: 1237:  //decrease number in supply pile
        1: 1238:  state->supplyCount[supplyPos]--;
        -: 1239:   
        1: 1240:  return 0;
        -: 1241:}
        -: 1242:
function updateCoins called 18 returned 100% blocks executed 100%
       18: 1243:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1244:{
        -: 1245:  int i;
        -: 1246:  
        -: 1247:  //reset coin count
       18: 1248:  state->coins = 0;
        -: 1249:
        -: 1250:  //add coins for each Treasure card in player's hand
      108: 1251:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 90
branch  1 taken 18 (fallthrough)
        -: 1252:    {
       90: 1253:      if (state->hand[player][i] == copper)
branch  0 taken 57 (fallthrough)
branch  1 taken 33
        -: 1254:  {
       57: 1255:    state->coins += 1;
        -: 1256:  }
       33: 1257:      else if (state->hand[player][i] == silver)
branch  0 taken 9 (fallthrough)
branch  1 taken 24
        -: 1258:  {
        9: 1259:    state->coins += 2;
        -: 1260:  }
       24: 1261:      else if (state->hand[player][i] == gold)
branch  0 taken 7 (fallthrough)
branch  1 taken 17
        -: 1262:  {
        7: 1263:    state->coins += 3;
        -: 1264:  } 
        -: 1265:    } 
        -: 1266:
        -: 1267:  //add bonus
       18: 1268:  state->coins += bonus;
        -: 1269:
       18: 1270:  return 0;
        -: 1271:}
        -: 1272:
        -: 1273:// Card Refactoring Assignment 2
function call_adventurer called 1 returned 100% blocks executed 75%
        1: 1274:void call_adventurer(struct gameState *state, int handPos) {
        1: 1275:  state->numActions--;
        -: 1276:  int cardDrawn;
        1: 1277:  int z = 0;
        1: 1278:  int currentPlayer = whoseTurn(state);
call    0 returned 1
        1: 1279:  int nextPlayer = currentPlayer + 1;
        -: 1280:  int temphand[MAX_HAND];// moved above the if statement
        1: 1281:  int drawntreasure = 0;
        -: 1282:
        5: 1283:  while(drawntreasure<3) {
branch  0 taken 3
branch  1 taken 1 (fallthrough)
        3: 1284:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####: 1285:      shuffle(currentPlayer, state);
call    0 never executed
        -: 1286:    }
        3: 1287:    drawCard(currentPlayer, state);
call    0 returned 3
        3: 1288:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        3: 1289:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 0 (fallthrough)
branch  1 taken 3
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        3: 1290:      drawntreasure++;
        -: 1291:    else{
    #####: 1292:      temphand[z]=cardDrawn;
    #####: 1293:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1294:      z++;
        -: 1295:    }
        -: 1296:  }
        -: 1297:
        3: 1298:  while(z>=0){
branch  0 taken 1
branch  1 taken 1 (fallthrough)
        1: 1299:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        1: 1300:    z=z-1;
        -: 1301:  }
        1: 1302:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 1
        1: 1303:}
        -: 1304:
function call_council_room called 1 returned 100% blocks executed 100%
        1: 1305:void call_council_room(struct gameState *state, int handPos) {
        1: 1306:  state->numActions--;
        1: 1307:  int currentPlayer = whoseTurn(state);
call    0 returned 1
        -: 1308:  int i;
        -: 1309:
        -: 1310:  //+4 Cards
        5: 1311:  for (i = 0; i < 4; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4: 1312:    drawCard(currentPlayer, state);
call    0 returned 4
        -: 1313:  }
        -: 1314:
        -: 1315:  //+1 Buy
        1: 1316:  state->numBuys++;
        -: 1317:
        -: 1318:  //Each other player draws a card
        2: 1319:  for (i = 1; i < state->numPlayers; i++) {
branch  0 taken 1
branch  1 taken 1 (fallthrough)
        1: 1320:    if ( i != currentPlayer ) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 1321:      drawCard(i, state);
call    0 returned 1
        -: 1322:    }
        -: 1323:  }
        -: 1324:
        -: 1325:  //put played card in played card pile
        1: 1326:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 1
        1: 1327:}
        -: 1328:
function call_smithy called 3 returned 100% blocks executed 100%
        3: 1329:void call_smithy(struct gameState *state, int handPos) {
        3: 1330:  state->numActions--;
        3: 1331:  int currentPlayer = whoseTurn(state);
call    0 returned 3
        -: 1332:  int i;
        -: 1333:  //+3 Cards
       12: 1334:  for (i = 0; i < 3; i++)
branch  0 taken 9
branch  1 taken 3 (fallthrough)
        -: 1335:  {
        9: 1336:    drawCard(currentPlayer, state);
call    0 returned 9
        -: 1337:  }
        -: 1338:
        -: 1339:  //discard card from hand
        3: 1340:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 3
        3: 1341:}
        -: 1342:
function call_village called 2 returned 100% blocks executed 100%
        2: 1343:void call_village(struct gameState *state, int handPos) {
        2: 1344:  state->numActions--;
        2: 1345:  int currentPlayer = whoseTurn(state);
call    0 returned 2
        -: 1346:  //+1 Card
        2: 1347:  drawCard(currentPlayer, state);
call    0 returned 2
        -: 1348:
        -: 1349:  //+2 Actions
        2: 1350:  state->numActions = state->numActions + 2;
        -: 1351:
        -: 1352:  //discard played card from hand
        2: 1353:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 2
        2: 1354:}
        -: 1355:
function call_great_hall called 0 returned 0% blocks executed 0%
    #####: 1356:void call_great_hall(struct gameState *state, int handPos) {
    #####: 1357:  state->numActions--;
    #####: 1358:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1359://+1 Card
    #####: 1360:  drawCard(currentPlayer, state);
call    0 never executed
        -: 1361:
        -: 1362:  //+1 Actions
    #####: 1363:  state->numActions++;
        -: 1364:
        -: 1365:  //discard card from hand
    #####: 1366:  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1367:}
        -: 1368://end of dominion.c
        -: 1369:
